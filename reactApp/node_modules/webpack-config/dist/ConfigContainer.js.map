{"version":3,"sources":["../src/ConfigContainer.js"],"names":["CONTAINER","ConfigContainer","set","setUp","container","bindValue","process","env","bindClass","with","T","constitute","resolve","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIA,IAAMA,YAAY,uBAAlB;;AAEA;;;;IAGMC,e;AACF;;;AAGA,+BAAc;AAAA;;AACVD,kBAAUE,GAAV,CAAc,IAAd,EAAoB,2BAApB;;AAEA,aAAKC,KAAL;AACH;;AAED;;;;;;;;;;AAQA;;;;gCAIQ;AACJ,gBAAMC,YAAY,KAAKA,SAAvB;;AAEAA,sBAAUC,SAAV,CAAoBJ,eAApB,EAAqC,IAArC;AACAG,sBAAUC,SAAV,8BAAuC,gCAAsB,uBAAeC,QAAQC,GAAvB,CAAtB,CAAvC;AACAH,sBAAUI,SAAV,+CAA8C,6BAA9C;AAGAJ,sBAAUC,SAAV,+BAAwC,kCAAxC;AACAD,sBAAUI,SAAV,iEAAgE,2DAAhE;AAIAJ,sBAAUI,SAAV,6DAA4D,gCAA5D;AAGAJ,sBAAUI,SAAV,iDAAgD,8EAAhD;AAKAJ,sBAAUI,SAAV,mDAAkD,CAC9CP,eAD8C,CAAlD;AAGAG,sBAAUI,SAAV,qCAAoC,sBAAUC,IAAV,CAAe,gCAAf,CAApC;AAGAL,sBAAUI,SAAV,mEAAkE,gCAAlE;AAGAJ,sBAAUI,SAAV,mEAAkE,iCAAlE;AAGAJ,sBAAUI,SAAV,6DAA4D,iCAA5D;AAGAJ,sBAAUI,SAAV,+DAA8D,kFAA9D;AAKAJ,sBAAUI,SAAV,iEAAgE,CAC5DP,eAD4D,CAAhE;AAGH;;AAED;;;;;;;gCAIQS,C,EAAG;AACP,mBAAO,KAAKN,SAAL,CAAeO,UAAf,CAA0BD,CAA1B,CAAP;AACH;;AAED;;;;;;;8BAIMA,C,EAAG;AAAA;;AACL,mBAAO;AAAA,uBAAM,MAAKE,OAAL,CAAaF,CAAb,CAAN;AAAA,aAAP;AACH;;;4BApEe;AACZ,mBAAOV,UAAUa,GAAV,CAAc,IAAd,CAAP;AACH;;;;;kBAqEUZ,e","file":"ConfigContainer.js","sourcesContent":["import {\n    Container,\n    Transient\n} from 'constitute';\nimport Config from './Config';\nimport ConfigCache from './ConfigCache';\nimport ConfigEnvironment from './ConfigEnvironment';\nimport ConfigPatternCache from './ConfigPatternCache';\nimport ConfigStringResolver from './ConfigStringResolver';\nimport ConfigPathResolver from './ConfigPathResolver';\nimport ConfigLoader from './ConfigLoader';\nimport ConfigFactory from './ConfigFactory';\nimport ConfigOptionsResolver from './ConfigOptionsResolver';\nimport ConfigDefaultsCommand from './ConfigDefaultsCommand';\nimport ConfigMergeCommand from './ConfigMergeCommand';\nimport ConfigExtendCommand from './ConfigExtendCommand';\nimport ConfigCommandFactory from './ConfigCommandFactory';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CONTAINER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigContainer {\n    /**\n     * @constructor\n     */\n    constructor() {\n        CONTAINER.set(this, new Container());\n\n        this.setUp();\n    }\n\n    /**\n     * @protected\n     * @type {Container}\n     */\n    get container() {\n        return CONTAINER.get(this);\n    }\n\n    /**\n     * @protected\n     * @returns {void}\n     */\n    setUp() {\n        const container = this.container;\n\n        container.bindValue(ConfigContainer, this);\n        container.bindValue(ConfigEnvironment, new ConfigEnvironment(Object.entries(process.env)));\n        container.bindClass(ConfigCache, ConfigCache, [\n            ConfigEnvironment\n        ]);\n        container.bindValue(ConfigPatternCache, new ConfigPatternCache());\n        container.bindClass(ConfigStringResolver, ConfigStringResolver, [\n            ConfigEnvironment,\n            ConfigPatternCache\n        ]);\n        container.bindClass(ConfigPathResolver, ConfigPathResolver, [\n            ConfigStringResolver\n        ]);\n        container.bindClass(ConfigLoader, ConfigLoader, [\n            ConfigPathResolver,\n            ConfigCache,\n            ConfigFactory\n        ]);\n        container.bindClass(ConfigFactory, ConfigFactory, [\n            ConfigContainer\n        ]);\n        container.bindClass(Config, Config, Transient.with([\n            ConfigCommandFactory\n        ]));\n        container.bindClass(ConfigOptionsResolver, ConfigOptionsResolver, [\n            ConfigStringResolver\n        ]);\n        container.bindClass(ConfigDefaultsCommand, ConfigDefaultsCommand, [\n            ConfigOptionsResolver\n        ]);\n        container.bindClass(ConfigMergeCommand, ConfigMergeCommand, [\n            ConfigOptionsResolver\n        ]);\n        container.bindClass(ConfigExtendCommand, ConfigExtendCommand, [\n            ConfigOptionsResolver,\n            ConfigLoader,\n            ConfigFactory\n        ]);\n        container.bindClass(ConfigCommandFactory, ConfigCommandFactory, [\n            ConfigContainer\n        ]);\n    }\n\n    /**\n     * @param {*} T\n     * @returns {*}\n     */\n    resolve(T) {\n        return this.container.constitute(T);\n    }\n\n    /**\n     * @param {*} T\n     * @returns {Function}\n     */\n    proxy(T) {\n        return () => this.resolve(T);\n    }\n}\n\nexport default ConfigContainer;\n"]}