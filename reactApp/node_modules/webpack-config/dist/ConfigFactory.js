'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _lodash = require('lodash');

var _Config = require('./Config');

var _Config2 = _interopRequireDefault(_Config);

var _ConfigList = require('./ConfigList');

var _ConfigList2 = _interopRequireDefault(_ConfigList);

var _ConfigArgv = require('./ConfigArgv');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * @type {WeakMap}
 */
var CONTAINER = new _weakMap2.default();

/**
 * @class
 */

var ConfigFactory = function () {
    /**
     * @constructor
     * @param {ConfigContainer} container
     */
    function ConfigFactory(container) {
        (0, _classCallCheck3.default)(this, ConfigFactory);

        CONTAINER.set(this, container);
    }

    /**
     * @readonly
     * @type {ConfigContainer}
     */


    (0, _createClass3.default)(ConfigFactory, [{
        key: 'initWith',


        /**
         * @private
         * @param {Object|Config} value
         * @returns {Config}
         */
        value: function initWith(value) {
            var config = void 0;

            if (value instanceof _Config2.default) {
                config = value.clone();
            } else {
                config = this.container.resolve(_Config2.default).merge(value);
            }

            return config;
        }

        /**
         * @param {Function|Object|Object[]} value
         * @returns {Config|ConfigList}
         */

    }, {
        key: 'createConfig',
        value: function createConfig(value) {
            var _this = this;

            var config = void 0;

            if ((0, _lodash.isFunction)(value)) {
                config = value(_ConfigArgv.env);
            }

            if (Array.isArray(value)) {
                config = _ConfigList2.default.from(value, function (x) {
                    return _this.initWith(x);
                });
            } else if ((0, _lodash.isObject)(value)) {
                config = this.initWith(value);
            }

            return config;
        }
    }, {
        key: 'container',
        get: function get() {
            return CONTAINER.get(this);
        }
    }]);
    return ConfigFactory;
}();

exports.default = ConfigFactory;
module.exports = exports['default'];
//# sourceMappingURL=ConfigFactory.js.map