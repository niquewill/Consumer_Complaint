'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _ConfigCommand2 = require('./ConfigCommand');

var _ConfigCommand3 = _interopRequireDefault(_ConfigCommand2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class
 * @extends {ConfigCommand}
 */
var ConfigMergeCommand = function (_ConfigCommand) {
    (0, _inherits3.default)(ConfigMergeCommand, _ConfigCommand);

    function ConfigMergeCommand() {
        (0, _classCallCheck3.default)(this, ConfigMergeCommand);
        return (0, _possibleConstructorReturn3.default)(this, (ConfigMergeCommand.__proto__ || (0, _getPrototypeOf2.default)(ConfigMergeCommand)).apply(this, arguments));
    }

    (0, _createClass3.default)(ConfigMergeCommand, [{
        key: 'execute',

        /**
         * @override
         */
        value: function execute(config, options) {
            var value = this.optionsResolver.resolve(config, options);

            (0, _lodash.mergeWith)(config, value, function (x, y) {
                // eslint-disable-line consistent-return
                if (Array.isArray(x) && Array.isArray(y)) {
                    return [].concat((0, _toConsumableArray3.default)(x), (0, _toConsumableArray3.default)(y));
                } else if (Array.isArray(x) && (0, _lodash.isObject)(y)) {
                    return [].concat((0, _toConsumableArray3.default)(x), [y]);
                } else if ((0, _lodash.isObject)(x) && Array.isArray(y)) {
                    return [x].concat((0, _toConsumableArray3.default)(y));
                }
            });
        }
    }]);
    return ConfigMergeCommand;
}(_ConfigCommand3.default);

exports.default = ConfigMergeCommand;
module.exports = exports['default'];
//# sourceMappingURL=ConfigMergeCommand.js.map