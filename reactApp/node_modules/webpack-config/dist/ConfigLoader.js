'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * @type {WeakMap}
 */
var PATH_RESOLVER = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var CACHE = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var FACTORY = new _weakMap2.default();

/**
 * @class
 */

var ConfigLoader = function () {
  /**
   * @constructor
   * @param {ConfigPathResolver} pathResolver
   * @param {ConfigCache} cache
   * @param {ConfigFactory} factory
   */
  function ConfigLoader(pathResolver, cache, factory) {
    (0, _classCallCheck3.default)(this, ConfigLoader);

    PATH_RESOLVER.set(this, pathResolver);
    CACHE.set(this, cache);
    FACTORY.set(this, factory);
  }

  /**
   * @readonly
   * @type {ConfigPathResolver}
   */


  (0, _createClass3.default)(ConfigLoader, [{
    key: 'loadConfig',


    /**
     * @param {String} filename
     * @returns {Config|ConfigList}
     */
    value: function loadConfig(filename) {
      filename = this.pathResolver.resolve(filename);

      var config = this.cache.get(filename);

      if (config) {
        config = this.factory.createConfig(config);
      }

      if (config && !(0, _lodash.isString)(config.filename)) {
        config.filename = filename;
      }

      return config;
    }
  }, {
    key: 'pathResolver',
    get: function get() {
      return PATH_RESOLVER.get(this);
    }

    /**
     * @readonly
     * @type {ConfigCache}
     */

  }, {
    key: 'cache',
    get: function get() {
      return CACHE.get(this);
    }

    /**
     * @readonly
     * @type {ConfigFactory}
     */

  }, {
    key: 'factory',
    get: function get() {
      return FACTORY.get(this);
    }
  }]);
  return ConfigLoader;
}();

exports.default = ConfigLoader;
module.exports = exports['default'];
//# sourceMappingURL=ConfigLoader.js.map