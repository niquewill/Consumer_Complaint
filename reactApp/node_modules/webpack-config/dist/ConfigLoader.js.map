{"version":3,"sources":["../src/ConfigLoader.js"],"names":["PATH_RESOLVER","CACHE","FACTORY","ConfigLoader","pathResolver","cache","factory","set","filename","resolve","config","get","createConfig"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;;;;AAIA,IAAMA,gBAAgB,uBAAtB;;AAEA;;;;AAIA,IAAMC,QAAQ,uBAAd;;AAEA;;;;AAIA,IAAMC,UAAU,uBAAhB;;AAEA;;;;IAGMC,Y;AACF;;;;;;AAMA,wBAAYC,YAAZ,EAA0BC,KAA1B,EAAiCC,OAAjC,EAA0C;AAAA;;AACtCN,kBAAcO,GAAd,CAAkB,IAAlB,EAAwBH,YAAxB;AACAH,UAAMM,GAAN,CAAU,IAAV,EAAgBF,KAAhB;AACAH,YAAQK,GAAR,CAAY,IAAZ,EAAkBD,OAAlB;AACH;;AAED;;;;;;;;;;AAwBA;;;;+BAIWE,Q,EAAU;AACjBA,iBAAW,KAAKJ,YAAL,CAAkBK,OAAlB,CAA0BD,QAA1B,CAAX;;AAEA,UAAIE,SAAS,KAAKL,KAAL,CAAWM,GAAX,CAAeH,QAAf,CAAb;;AAEA,UAAIE,MAAJ,EAAY;AACRA,iBAAS,KAAKJ,OAAL,CAAaM,YAAb,CAA0BF,MAA1B,CAAT;AACH;;AAED,UAAIA,UAAU,CAAC,sBAASA,OAAOF,QAAhB,CAAf,EAA0C;AACtCE,eAAOF,QAAP,GAAkBA,QAAlB;AACH;;AAED,aAAOE,MAAP;AACH;;;wBAtCkB;AACf,aAAOV,cAAcW,GAAd,CAAkB,IAAlB,CAAP;AACH;;AAED;;;;;;;wBAIY;AACR,aAAOV,MAAMU,GAAN,CAAU,IAAV,CAAP;AACH;;AAED;;;;;;;wBAIc;AACV,aAAOT,QAAQS,GAAR,CAAY,IAAZ,CAAP;AACH;;;;;kBAuBUR,Y","file":"ConfigLoader.js","sourcesContent":["import {\n    isString\n} from 'lodash';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATH_RESOLVER = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CACHE = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst FACTORY = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigLoader {\n    /**\n     * @constructor\n     * @param {ConfigPathResolver} pathResolver\n     * @param {ConfigCache} cache\n     * @param {ConfigFactory} factory\n     */\n    constructor(pathResolver, cache, factory) {\n        PATH_RESOLVER.set(this, pathResolver);\n        CACHE.set(this, cache);\n        FACTORY.set(this, factory);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigPathResolver}\n     */\n    get pathResolver() {\n        return PATH_RESOLVER.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigCache}\n     */\n    get cache() {\n        return CACHE.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigFactory}\n     */\n    get factory() {\n        return FACTORY.get(this);\n    }\n\n    /**\n     * @param {String} filename\n     * @returns {Config|ConfigList}\n     */\n    loadConfig(filename) {\n        filename = this.pathResolver.resolve(filename);\n\n        let config = this.cache.get(filename);\n\n        if (config) {\n            config = this.factory.createConfig(config);\n        }\n\n        if (config && !isString(config.filename)) {\n            config.filename = filename;\n        }\n\n        return config;\n    }\n}\n\nexport default ConfigLoader;\n"]}