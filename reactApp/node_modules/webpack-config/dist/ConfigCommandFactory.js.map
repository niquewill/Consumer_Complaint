{"version":3,"sources":["../src/ConfigCommandFactory.js"],"names":["CONTAINER","ConfigCommandFactory","container","set","name","resolve","get"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA;;;;AAIA,IAAMA,YAAY,uBAAlB;;AAEA;;;;IAGMC,oB;AACF;;;;AAIA,gCAAYC,SAAZ,EAAuB;AAAA;;AACnBF,cAAUG,GAAV,CAAc,IAAd,EAAoBD,SAApB;AACH;;AAED;;;;;;;;;;AAQA;;;;;kCAKcE,I,EAAM;AAChB,aAAO,KAAKF,SAAL,CAAeG,OAAf,CAAuB,6BAAMD,IAAN,CAAvB,CAAP;AACH;;;wBAXe;AACZ,aAAOJ,UAAUM,GAAV,CAAc,IAAd,CAAP;AACH;;;;;kBAYUL,oB","file":"ConfigCommandFactory.js","sourcesContent":["import types from './ConfigCommandTypes';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CONTAINER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigCommandFactory {\n    /**\n     * @constructor\n     * @param {ConfigContainer} container\n     */\n    constructor(container) {\n        CONTAINER.set(this, container);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigContainer}\n     */\n    get container() {\n        return CONTAINER.get(this);\n    }\n\n    /**\n     * Creates {@link ConfigCommand}\n     * @param {String} name\n     * @returns {ConfigCommand}\n     */\n    createCommand(name) {\n        return this.container.resolve(types[name]);\n    }\n}\n\nexport default ConfigCommandFactory;\n"]}