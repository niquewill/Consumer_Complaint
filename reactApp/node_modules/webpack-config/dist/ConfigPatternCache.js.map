{"version":3,"sources":["../src/ConfigPatternCache.js"],"names":["DEFAULT_INTERPOLATE","INTERPOLATE","ConfigPatternCache","interpolate","key","has","set","get","value","compile","options","compiledTemplate","getOrSet"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;;;;AAIA,IAAMA,sBAAsB,gBAA5B;;AAEA;;;;AAIA,IAAMC,cAAc,uBAApB;;AAEA;;;;;IAIMC,kB;;;AACF;;;;AAIA,kCAA+C;AAAA,YAAnCC,WAAmC,uEAArBH,mBAAqB;AAAA;;AAAA;;AAG3C,cAAKG,WAAL,GAAmBA,WAAnB;AAH2C;AAI9C;;AAED;;;;;;;;;AAoBA;;;;iCAISC,G,EAAK;AACV,gBAAI,CAAC,KAAKC,GAAL,CAASD,GAAT,CAAL,EAAoB;AAChB,qBAAKE,GAAL,CAASF,GAAT,EAAcA,GAAd;AACH;;AAED,mBAAO,KAAKG,GAAL,CAASH,GAAT,CAAP;AACH;;AAED;;;;;;;;;4BAMIA,G,EAAKI,K,EAAO;AACZ,qKAAiBJ,GAAjB,EAAsB,KAAKK,OAAL,CAAaD,KAAb,CAAtB;AACH;;AAED;;;;;;;;8BAKKA,K,EAAqB;AAAA,gBAAdE,OAAc,uEAAJ,EAAI;;AACtB,gBAAMC,mBAAmB,KAAKC,QAAL,CAAcJ,KAAd,CAAzB;;AAEA,mBAAOG,iBAAiBD,OAAjB,CAAP;AACH;;AAED;;;;;;;gCAIQF,K,EAAO;AACX,mBAAO,sBAASA,KAAT,EAAgB;AACnBL,6BAAa,KAAKA;AADC,aAAhB,CAAP;AAGH;;;4BA1DiB;AACd,mBAAOF,YAAYM,GAAZ,CAAgB,IAAhB,CAAP;AACH;;AAED;;;;;;;;;;0BASgBC,K,EAAO;AACnBP,wBAAYK,GAAZ,CAAgB,IAAhB,EAAsBE,KAAtB;AACH;;;;;kBA8CUN,kB","file":"ConfigPatternCache.js","sourcesContent":["import {\n    template\n} from 'lodash';\n\n/**\n * @private\n * @type {RegExp}\n */\nconst DEFAULT_INTERPOLATE = /\\[([\\w\\s]+?)]/g;\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst INTERPOLATE = new WeakMap();\n\n/**\n * @class\n * @extends {Map}\n */\nclass ConfigPatternCache extends Map {\n    /**\n     * @constructor\n     * @param {RegExp} [interpolate=/\\[([\\w\\s]+?)]/g]\n     */\n    constructor(interpolate = DEFAULT_INTERPOLATE) {\n        super();\n\n        this.interpolate = interpolate;\n    }\n\n    /**\n     * @type {RegExp}\n     */\n    get interpolate() {\n        return INTERPOLATE.get(this);\n    }\n\n    /**\n     * @example\n     * import {\n     *   patternCache\n     * } from 'webpack-config';\n     *\n     * patternCache.interpolate = /{([\\w\\s]+?)}/g;\n     * @param {RegExp} value\n     */\n    set interpolate(value) {\n        INTERPOLATE.set(this, value);\n    }\n\n    /**\n     * @param {*} key\n     * @returns {RegExp}\n     */\n    getOrSet(key) {\n        if (!this.has(key)) {\n            this.set(key, key);\n        }\n\n        return this.get(key);\n    }\n\n    /**\n     * @override\n     * @param {*} key\n     * @param {String} value\n     * @returns {RegExp}\n     */\n    set(key, value) {\n        return super.set(key, this.compile(value));\n    }\n\n    /**\n     * @param {String} value\n     * @param {Object} options\n     * @returns {String}\n     */\n    eval(value, options = {}) {\n        const compiledTemplate = this.getOrSet(value);\n\n        return compiledTemplate(options);\n    }\n\n    /**\n     * @param {String} value\n     * @returns {Function}\n     */\n    compile(value) {\n        return template(value, {\n            interpolate: this.interpolate\n        });\n    }\n}\n\nexport default ConfigPatternCache;\n"]}