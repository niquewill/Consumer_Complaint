{"version":3,"sources":["../src/ConfigPathResolver.js"],"names":["PATH_RESOLVERS","STRING_RESOLVER","ConfigPathResolver","stringResolver","pathResolvers","set","from","value","resolve","x","get"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAGA;;;;AACA;;;;;;AAEA;;;;AAIA,IAAMA,iBAAiB,uBAAvB;;AAEA;;;;AAIA,IAAMC,kBAAkB,uBAAxB;;AAEA;;;;IAGMC,kB;AACF;;;;;AAKA,8BAAYC,cAAZ,EAA+D;AAAA,QAAnCC,aAAmC;AAAA;;AAC3DH,oBAAgBI,GAAhB,CAAoB,IAApB,EAA0BF,cAA1B;AACAH,mBAAeK,GAAf,CAAmB,IAAnB,EAAyB,6BAAmBC,IAAnB,CAAwBF,aAAxB,CAAzB;AACH;;AAED;;;;;;;;;;AAgBA;;;;4BAIQG,K,EAAO;AACXA,cAAQ,KAAKJ,cAAL,CAAoBK,OAApB,CAA4BD,KAA5B,CAAR;;AAEA,aAAO,KAAKH,aAAL,CAAmBI,OAAnB,CAA2BD,KAA3B,EAAkC;AAAA,eAAK,sBAASE,CAAT,CAAL;AAAA,OAAlC,CAAP;AACH;;;wBApBoB;AACjB,aAAOR,gBAAgBS,GAAhB,CAAoB,IAApB,CAAP;AACH;;AAED;;;;;;;wBAIoB;AAChB,aAAOV,eAAeU,GAAf,CAAmB,IAAnB,CAAP;AACH;;;;;kBAaUR,kB","file":"ConfigPathResolver.js","sourcesContent":["import {\n    isString\n} from 'lodash';\nimport ConfigStrategyList from './ConfigStrategyList';\nimport DEFAULT_RESOLVERS from './ConfigPathResolvers';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATH_RESOLVERS = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst STRING_RESOLVER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigPathResolver {\n    /**\n     * @constructor\n     * @param {ConfigStringResolver} stringResolver\n     * @param {Function[]} [pathResolvers]\n     */\n    constructor(stringResolver, pathResolvers = DEFAULT_RESOLVERS) {\n        STRING_RESOLVER.set(this, stringResolver);\n        PATH_RESOLVERS.set(this, ConfigStrategyList.from(pathResolvers));\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigStringResolver}\n     */\n    get stringResolver() {\n        return STRING_RESOLVER.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigStrategyList}\n     */\n    get pathResolvers() {\n        return PATH_RESOLVERS.get(this);\n    }\n\n    /**\n     * @param {String} value\n     * @returns {String}\n     */\n    resolve(value) {\n        value = this.stringResolver.resolve(value);\n\n        return this.pathResolvers.resolve(value, x => isString(x));\n    }\n}\n\nexport default ConfigPathResolver;\n"]}