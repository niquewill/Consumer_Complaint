"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = require("babel-runtime/core-js/weak-map");

var _weakMap2 = _interopRequireDefault(_weakMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * @type {WeakMap}
 */
var COMMAND = new _weakMap2.default();

/**
 * @class
 */

var ConfigCommandInvoker = function () {
  /**
   * @constructor
   * @param {ConfigCommand} command
   */
  function ConfigCommandInvoker(command) {
    (0, _classCallCheck3.default)(this, ConfigCommandInvoker);

    COMMAND.set(this, command);
  }

  /**
   * @readonly
   * @type {ConfigCommand}
   */


  (0, _createClass3.default)(ConfigCommandInvoker, [{
    key: "invoke",


    /**
     * @param {Config} config
     * @param {...*} values
     * @returns {Config}
     */
    value: function invoke(config) {
      for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        values[_key - 1] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(values), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var value = _step.value;

          this.command.execute(config, value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return config;
    }

    /**
     * @param {String} name
     * @param {Config} config
     * @param {...*} values
     * @return {Config}
     */

  }, {
    key: "command",
    get: function get() {
      return COMMAND.get(this);
    }
  }], [{
    key: "invoke",
    value: function invoke(name, config) {
      var _ref;

      var command = config.commandFactory.createCommand(name);

      for (var _len2 = arguments.length, values = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        values[_key2 - 2] = arguments[_key2];
      }

      return (_ref = new ConfigCommandInvoker(command)).invoke.apply(_ref, [config].concat(values));
    }
  }]);
  return ConfigCommandInvoker;
}();

exports.default = ConfigCommandInvoker;
module.exports = exports["default"];
//# sourceMappingURL=ConfigCommandInvoker.js.map