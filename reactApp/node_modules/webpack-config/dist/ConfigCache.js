'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _lodash = require('lodash');

var _ConfigStrategyList = require('./ConfigStrategyList');

var _ConfigStrategyList2 = _interopRequireDefault(_ConfigStrategyList);

var _ConfigCacheResolvers = require('./ConfigCacheResolvers');

var _ConfigCacheResolvers2 = _interopRequireDefault(_ConfigCacheResolvers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * @type {String}
 */
var PERSISTENT_KEY = 'WEBPACK_CONFIG_CACHE';

/**
 * @private
 * @type {WeakMap}
 */
var ENVIRONMENT = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var VALUE_RESOLVERS = new _weakMap2.default();

/**
 * Please set `WEBPACK_CONFIG_CACHE` environment variable to `false` to make it non persistent or just use {@link ConfigCache#persistent}
 * @class
 * @extends {Map}
 */

var ConfigCache = function (_Map) {
    (0, _inherits3.default)(ConfigCache, _Map);

    /**
     * @constructor
     * @param {ConfigEnvironment} environment
     * @param {Function[]} [valueResolvers]
     */
    function ConfigCache(environment) {
        var valueResolvers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _ConfigCacheResolvers2.default;
        (0, _classCallCheck3.default)(this, ConfigCache);

        var _this = (0, _possibleConstructorReturn3.default)(this, (ConfigCache.__proto__ || (0, _getPrototypeOf2.default)(ConfigCache)).call(this));

        ENVIRONMENT.set(_this, environment);
        VALUE_RESOLVERS.set(_this, _ConfigStrategyList2.default.from(valueResolvers));
        return _this;
    }

    /**
     * @readonly
     * @type {ConfigEnvironment}
     */


    (0, _createClass3.default)(ConfigCache, [{
        key: 'get',


        /**
         * @override
         */
        value: function get(key) {
            var value = void 0;

            if (this.persistent) {
                if (!this.has(key)) {
                    value = require(key);

                    this.set(key, value);
                } else {
                    value = (0, _get3.default)(ConfigCache.prototype.__proto__ || (0, _getPrototypeOf2.default)(ConfigCache.prototype), 'get', this).call(this, key);
                }
            } else {
                delete require.cache[key];

                value = require(key);
            }

            return this.valueResolvers.resolve(value, function (x) {
                return !(0, _lodash.isUndefined)(x);
            });
        }
    }, {
        key: 'environment',
        get: function get() {
            return ENVIRONMENT.get(this);
        }

        /**
         * @type {Boolean}
         */

    }, {
        key: 'persistent',
        get: function get() {
            return this.environment.getOrDefault(PERSISTENT_KEY, true) === true;
        }

        /**
         * @example
         * import {
         *   cache
         * } from 'webpack-config';
         *
         * cache.persistent = false;
         * @example
         * WEBPACK_CONFIG_CACHE=false ...
         * @param {Boolean} value
         */
        ,
        set: function set(value) {
            this.environment.set(PERSISTENT_KEY, value);
        }

        /**
         * @readonly
         * @type {ConfigStrategyList}
         */

    }, {
        key: 'valueResolvers',
        get: function get() {
            return VALUE_RESOLVERS.get(this);
        }
    }]);
    return ConfigCache;
}(_map2.default);

exports.default = ConfigCache;
module.exports = exports['default'];
//# sourceMappingURL=ConfigCache.js.map