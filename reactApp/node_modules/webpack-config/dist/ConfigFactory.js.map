{"version":3,"sources":["../src/ConfigFactory.js"],"names":["CONTAINER","ConfigFactory","container","set","value","config","clone","resolve","merge","Array","isArray","from","initWith","x","get"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAIA;;;;AACA;;;;AACA;;;;AAEA;;;;AAIA,IAAMA,YAAY,uBAAlB;;AAEA;;;;IAGMC,a;AACF;;;;AAIA,2BAAYC,SAAZ,EAAuB;AAAA;;AACnBF,kBAAUG,GAAV,CAAc,IAAd,EAAoBD,SAApB;AACH;;AAED;;;;;;;;;;AAQA;;;;;iCAKSE,K,EAAO;AACZ,gBAAIC,eAAJ;;AAEA,gBAAID,iCAAJ,EAA6B;AACzBC,yBAASD,MAAME,KAAN,EAAT;AACH,aAFD,MAEO;AACHD,yBAAS,KAAKH,SAAL,CAAeK,OAAf,mBAA+BC,KAA/B,CAAqCJ,KAArC,CAAT;AACH;;AAED,mBAAOC,MAAP;AACH;;AAED;;;;;;;qCAIaD,K,EAAO;AAAA;;AAChB,gBAAIC,eAAJ;;AAEA,gBAAI,wBAAWD,KAAX,CAAJ,EAAuB;AACnBC,yBAASD,sBAAT;AACH;;AAED,gBAAIK,MAAMC,OAAN,CAAcN,KAAd,CAAJ,EAA0B;AACtBC,yBAAS,qBAAWM,IAAX,CAAgBP,KAAhB,EAAuB;AAAA,2BAAK,MAAKQ,QAAL,CAAcC,CAAd,CAAL;AAAA,iBAAvB,CAAT;AACH,aAFD,MAEO,IAAI,sBAAST,KAAT,CAAJ,EAAqB;AACxBC,yBAAS,KAAKO,QAAL,CAAcR,KAAd,CAAT;AACH;;AAED,mBAAOC,MAAP;AACH;;;4BAvCe;AACZ,mBAAOL,UAAUc,GAAV,CAAc,IAAd,CAAP;AACH;;;;;kBAwCUb,a","file":"ConfigFactory.js","sourcesContent":["import {\n    isFunction,\n    isObject\n} from 'lodash';\nimport Config from './Config';\nimport ConfigList from './ConfigList';\nimport { env } from './ConfigArgv';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CONTAINER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigFactory {\n    /**\n     * @constructor\n     * @param {ConfigContainer} container\n     */\n    constructor(container) {\n        CONTAINER.set(this, container);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigContainer}\n     */\n    get container() {\n        return CONTAINER.get(this);\n    }\n\n    /**\n     * @private\n     * @param {Object|Config} value\n     * @returns {Config}\n     */\n    initWith(value) {\n        let config;\n\n        if (value instanceof Config) {\n            config = value.clone();\n        } else {\n            config = this.container.resolve(Config).merge(value);\n        }\n\n        return config;\n    }\n\n    /**\n     * @param {Function|Object|Object[]} value\n     * @returns {Config|ConfigList}\n     */\n    createConfig(value) {\n        let config;\n\n        if (isFunction(value)) {\n            config = value(env);\n        }\n\n        if (Array.isArray(value)) {\n            config = ConfigList.from(value, x => this.initWith(x));\n        } else if (isObject(value)) {\n            config = this.initWith(value);\n        }\n\n        return config;\n    }\n}\n\nexport default ConfigFactory;\n"]}