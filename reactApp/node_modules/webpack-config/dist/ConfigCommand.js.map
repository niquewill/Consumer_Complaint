{"version":3,"sources":["../src/ConfigCommand.js"],"names":["OPTIONS_RESOLVER","ConfigCommand","optionsResolver","set","config","options","get"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA,IAAMA,mBAAmB,uBAAzB;;AAEA;;;;IAGMC,a;AACF;;;;AAIA,yBAAYC,eAAZ,EAA6B;AAAA;;AACzBF,qBAAiBG,GAAjB,CAAqB,IAArB,EAA2BD,eAA3B;AACH;;AAED;;;;;;;;;;4BAMQE,M,EAAQC,O,EAAS,CAAE,C,CAAC;;AAE5B;;;;;;wBAGsB;AAClB,aAAOL,iBAAiBM,GAAjB,CAAqB,IAArB,CAAP;AACH;;;;;kBAGUL,a","file":"ConfigCommand.js","sourcesContent":["/**\n * @private\n * @type {WeakMap}\n */\nconst OPTIONS_RESOLVER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigCommand {\n    /**\n     * @constructor\n     * @param {ConfigOptionsResolver} optionsResolver\n     */\n    constructor(optionsResolver) {\n        OPTIONS_RESOLVER.set(this, optionsResolver);\n    }\n\n    /**\n     * @abstract\n     * @param {Config} config\n     * @param {ConfigOptions} options\n     * @returns {void}\n     */\n    execute(config, options) {} // eslint-disable-line no-unused-vars\n\n    /**\n     * @type {ConfigOptionsResolver}\n     */\n    get optionsResolver() {\n        return OPTIONS_RESOLVER.get(this);\n    }\n}\n\nexport default ConfigCommand;\n"]}