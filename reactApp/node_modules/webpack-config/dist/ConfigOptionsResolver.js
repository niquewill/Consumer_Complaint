'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _lodash = require('lodash');

var _recursiveIterator = require('recursive-iterator');

var _recursiveIterator2 = _interopRequireDefault(_recursiveIterator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @function
 * @name ConfigTransform
 * @param {Config} config
 * @returns {Config|Object}
 */

/**
 * @typedef {Object|ConfigTransform} ConfigOptions
 */

/**
 * @private
 * @type {WeakMap}
 */
var STRING_RESOLVER = new _weakMap2.default();

/**
 * @class
 */

var ConfigOptionsResolver = function () {
  /**
   * @constructor
   * @param {ConfigStringResolver} stringResolver
   */
  function ConfigOptionsResolver(stringResolver) {
    (0, _classCallCheck3.default)(this, ConfigOptionsResolver);

    STRING_RESOLVER.set(this, stringResolver);
  }

  /**
   * @readonly
   * @type {ConfigStringResolver}
   */


  (0, _createClass3.default)(ConfigOptionsResolver, [{
    key: 'resolve',


    /**
     * @param {Config} config
     * @param {ConfigOptions} options
     * @returns {Object}
     */
    value: function resolve(config, options) {
      var value = ConfigOptionsResolver.valueOf(config, options);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(new _recursiveIterator2.default(value, 1, true)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _step.value,
              parent = _step$value.parent,
              node = _step$value.node,
              key = _step$value.key;

          if ((0, _lodash.isString)(node)) {
            parent[key] = this.stringResolver.resolve(node);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return value;
    }
  }, {
    key: 'stringResolver',
    get: function get() {
      return STRING_RESOLVER.get(this);
    }

    /**
     * @private
     * @param {Config} config
     * @param {ConfigOptions} options
     * @returns {Object}
     */

  }], [{
    key: 'valueOf',
    value: function valueOf(config, options) {
      return (0, _lodash.isFunction)(options) ? options.call(config, config) : options;
    }
  }]);
  return ConfigOptionsResolver;
}();

exports.default = ConfigOptionsResolver;
module.exports = exports['default'];
//# sourceMappingURL=ConfigOptionsResolver.js.map