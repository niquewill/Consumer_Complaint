'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _lodash = require('lodash');

var _Config = require('./Config');

var _Config2 = _interopRequireDefault(_Config);

var _ConfigCommand2 = require('./ConfigCommand');

var _ConfigCommand3 = _interopRequireDefault(_ConfigCommand2);

var _ConfigDefaultTransform = require('./ConfigDefaultTransform');

var _ConfigDefaultTransform2 = _interopRequireDefault(_ConfigDefaultTransform);

var _ConfigCleanupTransform = require('./ConfigCleanupTransform');

var _ConfigCleanupTransform2 = _interopRequireDefault(_ConfigCleanupTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef {Object<String,ConfigTransform[]>} ConfigExtendOptions
 */

/**
 * @typedef {String|Object<String,ConfigTransform>|ConfigExtendOptions} ConfigExtendPossibleOptions
 */

/**
 * @private
 * @type {WeakMap}
 */
var LOADER = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var FACTORY = new _weakMap2.default();

/**
 * @class
 * @extends {ConfigCommand}
 */

var ConfigExtendCommand = function (_ConfigCommand) {
    (0, _inherits3.default)(ConfigExtendCommand, _ConfigCommand);

    /**
     * @constructor
     * @param {ConfigOptionsResolver} optionsResolver
     * @param {ConfigLoader} loader
     * @param {ConfigFactory} factory
     */
    function ConfigExtendCommand(optionsResolver, loader, factory) {
        (0, _classCallCheck3.default)(this, ConfigExtendCommand);

        var _this = (0, _possibleConstructorReturn3.default)(this, (ConfigExtendCommand.__proto__ || (0, _getPrototypeOf2.default)(ConfigExtendCommand)).call(this, optionsResolver));

        LOADER.set(_this, loader);
        FACTORY.set(_this, factory);
        return _this;
    }

    /**
     * @readonly
     * @type {ConfigLoader}
     */


    (0, _createClass3.default)(ConfigExtendCommand, [{
        key: 'execute',


        /**
         * @override
         */
        value: function execute(config, options) {
            var _this2 = this;

            var normalizedOptions = ConfigExtendCommand.normalizeOptions(options);

            normalizedOptions.forEach(function (value) {
                var _optionsResolver$reso = _this2.optionsResolver.resolve(config, value),
                    filename = _optionsResolver$reso.filename,
                    transforms = _optionsResolver$reso.transforms;

                var pendingConfig = _this2.loader.loadConfig(filename);

                if (pendingConfig instanceof _Config2.default) {
                    (function () {
                        config.dependencyTree.children.push(pendingConfig.dependencyTree);

                        var prevConfig = pendingConfig.clone();

                        transforms.forEach(function (transform) {
                            var currConfig = transform.call(config, prevConfig);

                            if (!(0, _lodash.isObject)(currConfig)) {
                                prevConfig = {};
                            } else {
                                prevConfig = currConfig;
                            }

                            if (!(prevConfig instanceof _Config2.default)) {
                                prevConfig = _this2.factory.createConfig({}).merge(prevConfig);
                            }
                        });

                        if (prevConfig instanceof _Config2.default) {
                            config.merge(prevConfig.toObject());
                        }
                    })();
                }
            });
        }

        /**
         * @param {ConfigExtendPossibleOptions} options
         * @returns {ConfigExtendOptions[]}
         */

    }, {
        key: 'loader',
        get: function get() {
            return LOADER.get(this);
        }

        /**
         * @readonly
         * @type {ConfigFactory}
         */

    }, {
        key: 'factory',
        get: function get() {
            return FACTORY.get(this);
        }
    }], [{
        key: 'normalizeOptions',
        value: function normalizeOptions(options) {
            var normalizedOptions = [];

            if ((0, _lodash.isString)(options)) {
                normalizedOptions = [{
                    filename: options,
                    transforms: [_ConfigDefaultTransform2.default, _ConfigCleanupTransform2.default]
                }];
            } else if ((0, _lodash.isObject)(options)) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = (0, _getIterator3.default)((0, _entries2.default)(options)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _step$value = (0, _slicedToArray3.default)(_step.value, 2),
                            filename = _step$value[0],
                            transform = _step$value[1];

                        var transforms = Array.isArray(transform) ? transform : [transform];

                        normalizedOptions.push({
                            filename: filename,
                            transforms: [].concat((0, _toConsumableArray3.default)(transforms), [_ConfigCleanupTransform2.default])
                        });
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }

            return normalizedOptions;
        }
    }]);
    return ConfigExtendCommand;
}(_ConfigCommand3.default);

exports.default = ConfigExtendCommand;
module.exports = exports['default'];
//# sourceMappingURL=ConfigExtendCommand.js.map