{"version":3,"sources":["../src/ConfigStringResolver.js"],"names":["ENVIRONMENT","PATTERN_CACHE","ConfigStringResolver","environment","patternCache","set","value","options","keys","key","valueOf","resolvedValue","eval","err","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA,IAAMA,cAAc,uBAApB;;AAEA;;;;AAIA,IAAMC,gBAAgB,uBAAtB;;AAEA;;;;IAGMC,oB;AACF;;;;;AAKA,kCAAYC,WAAZ,EAAyBC,YAAzB,EAAuC;AAAA;;AACnCJ,oBAAYK,GAAZ,CAAgB,IAAhB,EAAsBF,WAAtB;AACAF,sBAAcI,GAAd,CAAkB,IAAlB,EAAwBD,YAAxB;AACH;;AAED;;;;;;;;;;AAgBA;;;;gCAIQE,K,EAAO;AACX,gBAAMC,UAAU,EAAhB;;AADW;AAAA;AAAA;;AAAA;AAGX,gEAAkB,KAAKJ,WAAL,CAAiBK,IAAjB,EAAlB,4GAA2C;AAAA,wBAAhCC,GAAgC;;AACvCF,4BAAQE,GAAR,IAAe,KAAKN,WAAL,CAAiBO,OAAjB,CAAyBD,GAAzB,CAAf;AACH;AALU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOX,gBAAIE,sBAAJ;;AAEA,gBAAI;AACAA,gCAAgB,KAAKP,YAAL,CAAkBQ,IAAlB,CAAuBN,KAAvB,EAA8BC,OAA9B,CAAhB;AACH,aAFD,CAEE,OAAOM,GAAP,EAAY;AACVF,gCAAgBL,KAAhB;AACH;;AAED,mBAAOK,aAAP;AACH;;;4BAhCiB;AACd,mBAAOX,YAAYc,GAAZ,CAAgB,IAAhB,CAAP;AACH;;AAED;;;;;;;4BAImB;AACf,mBAAOb,cAAca,GAAd,CAAkB,IAAlB,CAAP;AACH;;;;;kBAyBUZ,oB","file":"ConfigStringResolver.js","sourcesContent":["/**\n* @private\n* @type {WeakMap}\n*/\nconst ENVIRONMENT = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATTERN_CACHE = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigStringResolver {\n    /**\n     * @constructor\n     * @param {ConfigEnvironment} environment\n     * @param {ConfigPatternCache} patternCache\n     */\n    constructor(environment, patternCache) {\n        ENVIRONMENT.set(this, environment);\n        PATTERN_CACHE.set(this, patternCache);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigEnvironment}\n     */\n    get environment() {\n        return ENVIRONMENT.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigPatternCache}\n     */\n    get patternCache() {\n        return PATTERN_CACHE.get(this);\n    }\n\n    /**\n     * @param {String} value\n     * @returns {String}\n     */\n    resolve(value) {\n        const options = {};\n\n        for (const key of this.environment.keys()) {\n            options[key] = this.environment.valueOf(key);\n        }\n\n        let resolvedValue;\n\n        try {\n            resolvedValue = this.patternCache.eval(value, options);\n        } catch (err) {\n            resolvedValue = value;\n        }\n\n        return resolvedValue;\n    }\n}\n\nexport default ConfigStringResolver;\n"]}